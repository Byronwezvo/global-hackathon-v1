// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AccountType {
  credit
  debit
}

model Users {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  accounts  Accounts[]

  Transaction Transaction[]

  InvestmentAccount InvestmentAccount[]

  Investment Investment[]
}

model Accounts {
  id           String        @id @default(uuid())
  userId       String
  name         String
  description  String?
  currency     String?
  type         AccountType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  user Users @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Transaction {
  id          String      @id @default(uuid())
  accountId   String
  userId      String // The owner of the transaction
  amount      Float
  type        AccountType
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    String? // Optional category for the transaction (e.g., "Food", "Salary")
  status      String? // Optional status field (e.g., "pending", "completed")
  reference   String? // Optional reference number for external systems

  account Accounts @relation(fields: [accountId], references: [id])
  user    Users    @relation(fields: [userId], references: [id])

  @@index([accountId])
  @@index([userId])
  @@index([accountId, userId])
}

model InvestmentAccount {
  id          String       @id @default(uuid())
  userId      String
  name        String
  description String?
  currency    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  investments Investment[]

  user Users @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Investment {
  id                  String   @id @default(uuid())
  investmentAccountId String
  userId              String // The owner of the investment
  amount              Float
  assetType           String // e.g., "Stock", "Bond", "Crypto"
  assetName           String // e.g., "AAPL", "US Treasury"
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  status              String? // Optional status field (e.g., "active", "closed")
  reference           String? // Optional reference number for external systems

  investmentAccount InvestmentAccount @relation(fields: [investmentAccountId], references: [id])
  user              Users             @relation(fields: [userId], references: [id])

  @@index([investmentAccountId])
  @@index([userId])
  @@index([investmentAccountId, userId])
}
